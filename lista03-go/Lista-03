{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO5YKO8mvh5sIOHUeTj+f23"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["01-"],"metadata":{"id":"E3SnVOUleF1X"}},{"cell_type":"code","source":["package main\n","\n","import \"fmt\"\n","\n","// funçao pra buscar um valor no vetor\n","func buscar(array []int, valor int) int {\n","    for i := 0; i < len(array); i++ {\n","        if array[i] == valor {\n","            return i\n","        }\n","    }\n","    return -1\n","}\n","\n","func main() {\n","\n","    // Definir o tamanho do vetor\n","    var tamanho int\n","    fmt.Printf(\"Digite o tamanho do vetor: \")\n","    fmt.Scan(&tamanho)\n","\n","    vet := make([]int, tamanho)\n","\n","\n","    // Definir o vetor\n","    fmt.Println(\"Digite os valores do vetor separados por um espaço:\")\n","    for i := 0; i < tamanho; i++ {\n","        fmt.Scan(&vet[i])\n","    }\n","\n","\n","    // Definir a quantidade de buscas a serem realizdas\n","    var quantidade int\n","    fmt.Printf(\"Digite a quantidade de números a serem checados: \")\n","    fmt.Scan(&quantidade)\n","\n","    busca := make([]int, quantidade)\n","\n","\n","    // Definir quais serao os numeros buscados\n","    for i := 0; i < quantidade; i++ {\n","\n","        fmt.Printf(\"digite o %d° numero a ser checado: \", i + 1)\n","        fmt.Scan(&busca[i])\n","    }\n","\n","\n","    // Fazer a busca\n","    array := vet\n","    for i := 0; i < len(busca); i++ {\n","        valor := busca[i]\n","        x := buscar(array,valor)\n","        if x == -1 {\n","            fmt.Println(\"NAO ACHEI\")\n","        } else {\n","            fmt.Println(\"ACHEI\")\n","        }\n","    }\n","}"],"metadata":{"id":"U9rscZaQeIAX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["02-"],"metadata":{"id":"4bJDnWmteRKv"}},{"cell_type":"code","source":["package main\n","\n","import (\n","    \"fmt\"\n",")\n","\n","func main(){\n","\n","    var tamanho int\n","    fmt.Printf(\"Digite o tamanho do vetor (valor entre 1 e 1000): \")\n","\n","    for{\n","        fmt.Scanf(\"%d\", &tamanho)\n","        if tamanho >= 1 && tamanho <= 1000{\n","            break\n","        }\n","        fmt.Println(\"Digite um valor válido:\")\n","    }\n","\n","    vetor := make([]int, tamanho)\n","\n","    fmt.Println(\"Digite os elementos do vetor separados por um espaço:\")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","    }\n","\n","    var numero int\n","    fmt.Printf(\"Digite o número a ser comparado: \")\n","    fmt.Scan(&numero)\n","\n","    x := 0\n","\n","    for i := 0; i < len(vetor); i++ {\n","        if vetor[i] >= numero{\n","            x++\n","        }\n","    }\n","\n","    fmt.Printf(\"Existem %d números maiores ou iguais a %d.\", x, numero)\n","\n","}"],"metadata":{"id":"wUZAfkZveSXf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["03-"],"metadata":{"id":"0W2A2S5sebC1"}},{"cell_type":"code","source":["package main\n","import \"fmt\"\n","\n","func main() {\n","\n","    var tamanho int\n","    fmt.Printf(\"Digite o tamanho do vetor: \")\n","    fmt.Scan(&tamanho)\n","\n","    if tamanho > 5000 {\n","        return\n","    }\n","\n","    vetor := make([]int, tamanho)\n","\n","    fmt.Println(\"Digite os elementos do vetor separados por um espaço:\")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","    }\n","\n","    inverso := make([]int, tamanho)\n","    temp := 0\n","\n","    for i := len(vetor) - 1; i > -1; i-- {\n","        inverso[temp] = vetor[i]\n","        temp++\n","    }\n","\n","    fmt.Println(inverso)\n","\n","}"],"metadata":{"id":"R__yVrjDecKu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["04-"],"metadata":{"id":"nAnE0IrWeiqG"}},{"cell_type":"code","source":["package main\n","\n","import \"fmt\"\n","\n","func main() {\n","\n","    var tamanho int\n","    fmt.Printf(\"Digite o tamanho do vetor: \")\n","    fmt.Scan(&tamanho)\n","\n","    if tamanho < 0 || tamanho > 5000 {\n","        fmt.Println(\"Tamanho inválido!\")\n","        return\n","    }\n","\n","    vetor := make([]int, tamanho)\n","\n","    fmt.Println(\"Digite os elementos do vetor separados por um espaço:\")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","    }\n","\n","    fmt.Printf(\"O seu vetor é:\\n%d\", vetor)\n","}"],"metadata":{"id":"A12iyFCqejyF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["05"],"metadata":{"id":"JiUtQgAnepH1"}},{"cell_type":"code","source":["package main\n","import \"fmt\"\n","\n","func main() {\n","\n","    for i := 1; i < 100; i++ {\n","    var tamanho int\n","    fmt.Printf(\"Digite o tamanho do %d° vetor: \", i)\n","    fmt.Scan(&tamanho)\n","\n","    if tamanho == 0 {\n","        return\n","    }\n","\n","    if tamanho <= 1 || tamanho > 10000 {\n","        fmt.Println(\"Tamanho inválido!\")\n","        return\n","    }\n","\n","    vetor := make([]int, tamanho)\n","\n","    fmt.Println(\"Digite os elementos do vetor separados por um espaço:\")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","        if vetor[i] < 0 || vetor[i] > 1000 {\n","            fmt.Println(\"Os elementos do vetor devem estar entre 0 e 1000!\")\n","            return\n","        }\n","    }\n","\n","    x := 0\n","    indice := 0\n","\n","    for i := 0; i < len(vetor); i++ {\n","       for j := 0; j < len(vetor); j++ {\n","           if vetor[i] > vetor[j] && vetor[i] > x {\n","               x = vetor[i]\n","               indice = i\n","           }\n","       }\n","    }\n","\n","    fmt.Println(\"Índice do maior elemento:\", indice)\n","    fmt.Println(\"Maior elemento:\", x)\n","    fmt.Printf(\"\\n\")\n","    }\n","}"],"metadata":{"id":"Xm5i9WWbeqCu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["06-"],"metadata":{"id":"tRGJGEMie-A1"}},{"cell_type":"code","source":["package main\n","\n","import \"fmt\"\n","\n","func main() {\n","\n","    var tamanho int\n","    fmt.Printf(\"Digite o tamanho do vetor: \")\n","    fmt.Scan(&tamanho)\n","\n","    if tamanho <= 0 || tamanho > 5000 {\n","        return\n","    }\n","\n","    vetor := make([]int, tamanho)\n","\n","    fmt.Println(\"Digite os elementos do vetor separados por um espaço:\")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","    }\n","\n","    soma := 0\n","    for i := 0; i < len(vetor); i++ {\n","        soma += vetor[i]\n","    }\n","\n","    fmt.Println(\"A soma dos elementos do vetor é:\", soma)\n","\n","\n","}"],"metadata":{"id":"n6kPH02ee_Ed"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["07-"],"metadata":{"id":"aVWuVd_BfEV1"}},{"cell_type":"code","source":["package main\n","\n","import \"fmt\"\n","\n","func main() {\n","\n","    for {\n","    var tamanho int\n","    fmt.Printf(\"Digite o tamanho do vetor: \")\n","    fmt.Scan(&tamanho)\n","\n","    if tamanho == 0 {\n","        return\n","    }\n","\n","    if tamanho <= 1 || tamanho > 10000 {\n","        fmt.Println(\"Valor inválido!\")\n","        return\n","    }\n","\n","    vetor := make([]int, tamanho)\n","\n","    fmt.Println(\"Digite os elementos do vetor separados por um espaço:\")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","\n","        if vetor[i] < 0 || vetor[i] > 10000 {\n","            fmt.Println(\"Valor inválido!\")\n","            return\n","        }\n","    }\n","\n","    maior := 0\n","\n","    for i := 0; i < len(vetor); i++ {\n","        if vetor[i] > vetor[maior]{\n","            maior = i\n","        }\n","    }\n","\n","    contagem := 0\n","\n","    for i := 0; i <= vetor[maior]; i++ {\n","        for j := 0; j < len(vetor); j++ {\n","            if vetor[j] <= i {\n","                contagem++\n","            }\n","        }\n","        fmt.Printf(\"(%d): %d\\n\", i, contagem)\n","        contagem = 0\n","    }\n","\n","    fmt.Printf(\"\\n\")\n","    }\n","}"],"metadata":{"id":"2xDMauiXfFl1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["08-"],"metadata":{"id":"DU_6rZT7fS8d"}},{"cell_type":"code","source":["package main\n","\n","import (\n","    \"fmt\"\n","    \"strconv\"\n",")\n","\n","func main() {\n","\n","\n","    for {\n","    const tamanho = 32\n","    var vetor [tamanho]int\n","\n","    var n int\n","    fmt.Printf(\"Digite o número a ser convertido para binário: \")\n","    fmt.Scan(&n)\n","\n","    for n > 0 {\n","\n","         for i := len(vetor) - 1; i >= 0; i-- {\n","\n","         vetor[i] = n % 2\n","         n = n / 2\n","        }\n","    }\n","\n","    var slice []int\n","\n","    for i := 0; i < len(vetor); i++ {\n","        if vetor[i] == 1 {\n","            slice = vetor[i:]\n","            break\n","        }\n","    }\n","\n","    var binario string\n","\n","    for i := 0; i < len(slice); i++ {\n","        binario += strconv.Itoa(slice[i])\n","    }\n","\n","    fmt.Println(binario, \"\\n\")\n","    }\n","}"],"metadata":{"id":"sTlg5g_2fUEs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["09-"],"metadata":{"id":"VT7PI9qHfn0T"}},{"cell_type":"code","source":["package main\n","\n","import (\n","\t\"fmt\"\n","\t\"math\"\n",")\n","\n","func distancia(x1, y1, z1, x2, y2, z2 float64) float64 {\n","\treturn math.Sqrt(math.Pow(x2-x1, 2) + math.Pow(y2-y1, 2) + math.Pow(z2-z1, 2))\n","}\n","\n","func main() {\n","\tvar N int\n","\tfmt.Printf(\"Digite a quantidade de pontos: \")\n","\tfmt.Scan(&N)\n","  fmt.Printf(\"\\n\")\n","\n","\tvar xAnt, yAnt, zAnt float64\n","\tfmt.Println(\"Digite as coordenadas x, y e z do ponto 1:\")\n","\tfmt.Scan(&xAnt, &yAnt, &zAnt)\n","\n","\tfor i := 1; i < N; i++ {\n","\t\tvar x, y, z float64\n","\t\tfmt.Printf(\"Digite as coordenadas x, y e z do ponto %d:\\n\", i+1)\n","\t\tfmt.Scan(&x, &y, &z)\n","\n","\t\td := distancia(xAnt, yAnt, zAnt, x, y, z)\n","\t\tfmt.Printf(\"A distância entre o ponto %d e o ponto %d é: %.2f\\n\\n\", i, i+1, d)\n","\n","\t\txAnt = x\n","\t\tyAnt = y\n","\t\tzAnt = z\n","\t}\n","}\n"],"metadata":{"id":"dQJbdWIKfohb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["10-"],"metadata":{"id":"NfN6gLBRfxQr"}},{"cell_type":"code","source":["package main\n","\n","import (\n","    \"fmt\"\n",")\n","\n","func main(){\n","\n","    var tamanho int\n","    fmt.Printf(\"Digite a quantidade de notas: \")\n","    fmt.Scan(&tamanho)\n","\n","    vetor := make ([]int, tamanho)\n","\n","    fmt.Println(\"Digite as notas: \")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","    }\n","\n","    frequencia := 0\n","\n","    for i := 0; i < len(vetor); i++ {\n","        if vetor[i] == vetor[len(vetor) - 1] {\n","            frequencia++\n","        }\n","    }\n","\n","    maior := 0\n","\n","    for i := 0; i < len(vetor); i++ {\n","        if vetor[i] > vetor[maior] {\n","            maior = i\n","        }\n","    }\n","\n","    fmt.Printf(\"Nota %d, %d vezes\\n\", vetor[len(vetor) - 1], frequencia)\n","    fmt.Printf(\"Nota %d, indice %d\", vetor[maior], maior)\n","\n","}"],"metadata":{"id":"7cu8TPtZfx5L"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["11-"],"metadata":{"id":"YrLrP-mhf38T"}},{"cell_type":"code","source":["package main\n","\n","import \"fmt\"\n","\n","func main() {\n","\n","    var tamanho int\n","    fmt.Printf(\"Digite o tamanho do vetor: \")\n","    fmt.Scan(&tamanho)\n","\n","    vetorV := make([]int, tamanho)\n","\n","    fmt.Println(\"Digite os elementos do vetor separados por um espaço:\")\n","    for i := 0; i < len(vetorV); i++ {\n","        fmt.Scan(&vetorV[i])\n","    }\n","\n","    vetorW := make([]int, len(vetorV))\n","\n","    j := 0\n","    for i := len(vetorV) - 1; i >= 0; i-- {\n","        vetorW[j] = vetorV[i]\n","        j++\n","    }\n","\n","    maior := 0\n","    menor := 0\n","\n","    for i := 0; i < len(vetorV); i++ {\n","        if vetorV[i] > vetorV[maior]{\n","            maior = i\n","        }\n","        if vetorV[i] < vetorV[menor]{\n","            menor = i\n","        }\n","    }\n","\n","    fmt.Println(vetorV)\n","    fmt.Println(vetorW)\n","    fmt.Println(\"Maior número:\", vetorV[maior])\n","    fmt.Println(\"Menor número:\", vetorV[menor])\n","\n","}"],"metadata":{"id":"0SenHOEdf43L"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["12-"],"metadata":{"id":"wCzHCKXYf_3T"}},{"cell_type":"code","source":["package main\n","\n","import \"fmt\"\n","\n","func main() {\n","\n","    var tamanho int\n","    fmt.Println(\"Digite o tamanho da lista: \")\n","    fmt.Scan(&tamanho)\n","\n","    if tamanho <= 1 || tamanho > 1000 {\n","        fmt.Println(\"Tamanho inválido!\")\n","        return\n","    }\n","\n","    vetor := make([]int, tamanho)\n","\n","    fmt.Println(\"Digite os números da lista:\")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","    }\n","\n","    ordem := false\n","\n","    for !ordem {\n","        ordem = true\n","        for i := 0; i < len(vetor) - 1; i++ {\n","            if vetor[i] > vetor[i+1] {\n","                vetor[i], vetor[i+1] = vetor[i+1], vetor[i]\n","                ordem = false\n","            }\n","        }\n","    }\n","\n","    fmt.Println(\"\")\n","    fmt.Println(\"Numeros na ordem crescente:\")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Println(vetor[i])\n","    }\n","}"],"metadata":{"id":"taUwFyW2gBHD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["13-"],"metadata":{"id":"jjyzpf4IgF2j"}},{"cell_type":"code","source":["package main\n","\n","import \"fmt\"\n","\n","func main() {\n","\n","    var tamanho int\n","    fmt.Printf(\"Quantos números terão a sequência? \")\n","    fmt.Scan(&tamanho)\n","\n","    vetor := make([]int, tamanho)\n","\n","    fmt.Println(\"Digite a sequência de números:\")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","    }\n","\n","    frequencia := make([]int, tamanho)\n","\n","    for _, cont := range vetor{\n","        for i := 0; i < len(vetor); i ++ {\n","            if cont == vetor[i]{\n","                frequencia[i]++\n","            }\n","        }\n","    }\n","\n","    maiorfreq := 0\n","    for i := 0; i < len(frequencia); i++ {\n","        if frequencia[i] > frequencia[maiorfreq] {\n","            maiorfreq = i\n","        }\n","        if frequencia[i] == frequencia[maiorfreq] {\n","            if vetor[i] < vetor[maiorfreq]{\n","                maiorfreq = i\n","            }\n","        }\n","    }\n","\n","    fmt.Println(\"Numero mais frequente:\", vetor[maiorfreq])\n","    fmt.Println(\"Frequencia:\", frequencia[maiorfreq])\n","}"],"metadata":{"id":"zC1jWJxQgGor"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["14-"],"metadata":{"id":"mg-lEiyagQca"}},{"cell_type":"code","source":["package main\n","\n","import \"fmt\"\n","\n","func main() {\n","\n","    var tamanho int\n","    fmt.Printf(\"Digite a quantidade de numeros: \")\n","    fmt.Scan(&tamanho)\n","\n","    vetor := make([]int, tamanho)\n","\n","    fmt.Println(\"Digite os numeros: \")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","    }\n","\n","    ordem := false\n","\n","    for !ordem {\n","        ordem = true\n","        for i := 0; i < len(vetor) - 1; i++ {\n","            if vetor[i] > vetor[i+1] {\n","                vetor[i], vetor[i+1] = vetor[i+1], vetor[i]\n","                ordem = false\n","            }\n","        }\n","    }\n","\n","    impar := len(vetor)/2\n","    par := (float64(vetor[impar] + vetor[impar - 1]))/2\n","\n","\n","    if len(vetor) % 2 != 0 {\n","        fmt.Printf(\"Mediana = %.2f\", float64(vetor[impar]))\n","    } else {\n","        fmt.Printf(\"Mediana = %.2f\", par)\n","    }\n","\n","}"],"metadata":{"id":"ip66mnKtgRKK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["15-"],"metadata":{"id":"zor_rqg-gW4C"}},{"cell_type":"code","source":["package main\n","\n","import (\n","    \"fmt\"\n","    \"sort\"\n",")\n","\n","func main() {\n","\n","    var n int\n","    fmt.Printf(\"Qual o número de casos teste? \")\n","    fmt.Scan(&n)\n","    fmt.Printf(\"\\n\")\n","\n","    for i := 1; i <= n; i++ {\n","\n","    var qtd int\n","    fmt.Printf(\"Digite a quantidade de numeros: \")\n","    fmt.Scan(&qtd)\n","\n","    vetor := make([]int, qtd)\n","\n","\n","    fmt.Println(\"Digite os numeros: \")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","    }\n","\n","    sort.Ints(vetor)\n","\n","    distmin := vetor[len(vetor) - 1] - vetor[0]\n","\n","    for i := 1; i < len(vetor); i++ {\n","        distancia := vetor[i] - vetor[i-1]\n","        if distancia < distmin {\n","            distmin = distancia\n","        }\n","    }\n","    comparacoes := qtd*(qtd - 1)/2\n","\n","    fmt.Println(\"A distancia minima é:\", distmin)\n","    fmt.Println(\"A quantidade de comparacoes necessarias é:\", comparacoes)\n","    fmt.Printf(\"\\n\")\n","\n","    }\n","}"],"metadata":{"id":"RY9ypiUXgX_q"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["16-"],"metadata":{"id":"gmB3ahpwkWJx"}},{"cell_type":"code","source":["package main\n","\n","import \"fmt\"\n","\n","func main() {\n","\n","    var qtd, min int\n","    fmt.Printf(\"Digite a quantidade de alunos na turma: \")\n","    fmt.Scan(&qtd)\n","\n","    fmt.Printf(\"Digite a quantidade minima de alunos para comecar a aula: \")\n","    fmt.Scan(&min)\n","\n","    alunos := make([]int, qtd)\n","    contagem := 0\n","\n","    fmt.Println(\"Digite o tempo de chegada dos alunos: \")\n","    for i := 0; i < len(alunos); i++ {\n","        fmt.Scan(&alunos[i])\n","        if alunos[i] <= 0 {\n","            contagem++\n","        }\n","    }\n","\n","    if contagem < min {\n","        fmt.Println(\"SIM\")\n","    } else {\n","        fmt.Println(\"NAO\")\n","    }\n","}"],"metadata":{"id":"aTsEQm7fkXGK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["17-"],"metadata":{"id":"mp_89u08kbfB"}},{"cell_type":"code","source":["package main\n","\n","import \"fmt\"\n","\n","func main() {\n","\n","    var tamanho int\n","    fmt.Printf(\"Digite a quantidade de números: \")\n","    fmt.Scan(&tamanho)\n","\n","    vetor := make([]int, tamanho)\n","\n","    fmt.Println(\"Digite os números:\")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","    }\n","\n","    frequencia := make([]int, len(vetor))\n","\n","    for _, valor := range vetor {\n","        for i := 0; i < len(vetor); i++ {\n","            if vetor[i] == valor {\n","                frequencia[i]++\n","            }\n","        }\n","    }\n","\n","    contagem := 0\n","\n","    for i := 0; i < len(frequencia); i++ {\n","        if frequencia[i] == 1 {\n","            contagem++\n","        }\n","    }\n","\n","    fmt.Println(\"Existem\", contagem,\"numeros que aparecem apenas 1 vez.\")"],"metadata":{"id":"8VHIx_RWkcUJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["18-"],"metadata":{"id":"B2Q-Fe6mkjSA"}},{"cell_type":"code","source":["package main\n","import \"fmt\"\n","\n","func main() {\n","\n","    var qtd int\n","    fmt.Printf(\"Digite a quantidade de cpf's: \")\n","    fmt.Scan(&qtd)\n","\n","    for i := 1; i <= qtd; i++ {\n","\n","        var cpf [11]int\n","        x, y := 0, 0\n","\n","        fmt.Printf(\"Digite o cpf %d:\\n\", i)\n","        for i := 0; i < len(cpf); i++ {\n","            fmt.Scan(&cpf[i])\n","        }\n","\n","        for i := 1; i <= 9; i++ {\n","            x += cpf[i-1] * i\n","        }\n","\n","        j := 0\n","        for i := 9; i >= 1; i-- {\n","            y += cpf[j] * i\n","            j++\n","        }\n","\n","        if x % 11 == cpf[9] && y % 11 == cpf[10] {\n","            fmt.Println(\"CPF válido.\")\n","        } else {\n","            fmt.Println(\"CPF inválido!\")\n","        }"],"metadata":{"id":"Bb_KpsRQkkQQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["19-"],"metadata":{"id":"z9W0c21nkoFw"}},{"cell_type":"code","source":["package main\n","\n","import \"fmt\"\n","\n","func main() {\n","\n","    var qtd int\n","    fmt.Printf(\"Digite a quantidade de numeros: \")\n","    fmt.Scan(&qtd)\n","\n","    vetor := make([]int, qtd)\n","\n","    fmt.Println(\"Digite os numeros em ordem crescente: \")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","    }\n","    fmt.Println(\"numeros unicos:\")\n","    for i := 0; i < len(vetor); i++ {\n","        if i == len(vetor) - 1 {\n","            if vetor[i] == vetor[i-1] || vetor[i] != vetor[i-1] {\n","                fmt.Println(vetor[i])\n","            }\n","        } else {\n","        if vetor[i] != vetor[i+1] {\n","            fmt.Println(vetor[i])\n","        }\n","    }\n","\n","    }\n","}"],"metadata":{"id":"Oijbxuc3ko-I"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["20-"],"metadata":{"id":"Wye0yrnrkuxQ"}},{"cell_type":"code","source":["package main\n","\n","import (\n","\t\"fmt\"\n","\t\"math\"\n",")\n","\n","type Point struct {\n","\tX, Y, Z float64\n","}\n","\n","func vectorMagnitude(p1, p2 Point) float64 {\n","\tv := Point{p2.X - p1.X, p2.Y - p1.Y, p2.Z - p1.Z}\n","\treturn math.Max(math.Max(math.Abs(v.X), math.Abs(v.Y)), math.Abs(v.Z))\n","}\n","\n","func main() {\n","\tvar N int\n","    fmt.Println(\"Digite a quantidade de pontos:\")\n","\tfmt.Scan(&N)\n","\n","\tvar points []Point\n","\n","\tfor i := 0; i < N; i++ {\n","\t\tvar x, y, z float64\n","\t\tfmt.Printf(\"Digite as coordenadas x, y e z do ponto %d:\\n\", i + 1)\n","\t\tfmt.Scan(&x, &y, &z)\n","\t\tpoints = append(points, Point{x, y, z})\n","\t}\n","    fmt.Printf(\"\\n\")\n","\n","\tfor i := 0; i < N-1; i++ {\n","\t\tmagnitude := vectorMagnitude(points[i], points[i+1])\n","\t\tfmt.Printf(\"%.2f\\n\", magnitude)\n","\t}\n","}"],"metadata":{"id":"uhkWODO4kvg4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["21-"],"metadata":{"id":"hHe90F16k1Qo"}},{"cell_type":"code","source":["package main\n","\n","import (\n","\t\"fmt\"\n","\t\"sort\"\n",")\n","\n","func main() {\n","\n","\tvar qtd int\n","    fmt.Printf(\"Digite a quantidade de numeros: \")\n","    fmt.Scan(&qtd)\n","\n","    vetor := make([]int, qtd)\n","    var npares []int\n","\tvar nimpares []int\n","\n","    fmt.Println(\"Digite os numeros: \")\n","    for i := 0; i < len(vetor); i++ {\n","        fmt.Scan(&vetor[i])\n","        if vetor[i] % 2 == 0 {\n","            npares = append(npares, vetor[i])\n","        } else {\n","            nimpares = append(nimpares, vetor[i])\n","        }\n","    }\n","\tsort.Ints(npares)\n","\tsort.Ints(nimpares)\n","\n","\tfmt.Printf(\"\\nNumeros pares em ordem crescente:\\n\")\n","\tfor i := 0; i < len(npares); i++ {\n","\t    fmt.Println(npares[i])\n","\t}\n","\tfmt.Println(\"Numeros impares em ordem decrescente:\")\n","\tfor i := len(nimpares) - 1; i >= 0; i-- {\n","\t    fmt.Println(nimpares[i])\n","\t}\n","}"],"metadata":{"id":"-o9GstHYk2h4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["22-"],"metadata":{"id":"uGJbvWaBk56Y"}},{"cell_type":"code","source":["package main\n","\n","import (\n","\t\"fmt\"\n","\t\"strings\"\n",")\n","\n","func calcularMaiorPremio(numDigitos, digitosRestantes int, numero string) int {\n","\tvar pilha []byte\n","\n","\tfor i := 0; i < len(numero); i++ {\n","\t\tdigitosParaRemover := len(pilha) + len(numero) - i - digitosRestantes\n","\n","\t\tfor len(pilha) > 0 && digitosParaRemover > 0 && pilha[len(pilha)-1] < numero[i] {\n","\t\t\tpilha = pilha[:len(pilha)-1]\n","\t\t\tdigitosParaRemover--\n","\t\t}\n","\n","\t\tif len(pilha) < numDigitos-digitosRestantes {\n","\t\t\tpilha = append(pilha, numero[i])\n","\t\t}\n","\t}\n","\n","\tresultado := strings.TrimLeft(string(pilha), \"0\")\n","\tif resultado == \"\" {\n","\t\tresultado = \"0\"\n","\t}\n","\n","\tvar maiorPremio int\n","\tfmt.Sscanf(resultado, \"%d\", &maiorPremio)\n","\treturn maiorPremio\n","}\n","\n","func main() {\n","\tvar numDigitos, digitosRestantes int\n","\n","\tfor {\n","\t\tfmt.Scan(&numDigitos, &digitosRestantes)\n","\t\tif numDigitos == 0 && digitosRestantes == 0 {\n","\t\t\tbreak\n","\t\t}\n","\n","\t\tvar numero string\n","\t\tfmt.Scan(&numero)\n","\n","\t\tmaiorPremio := calcularMaiorPremio(numDigitos, digitosRestantes, numero)\n","\t\tfmt.Println(maiorPremio)\n","\t}\n","}"],"metadata":{"id":"uc7138Tok7Ew"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["23-"],"metadata":{"id":"Jp4BdWpXk_YQ"}},{"cell_type":"code","source":[],"metadata":{"id":"vV3QPtwglATg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["24-"],"metadata":{"id":"eNNJVJ3-lD5Q"}},{"cell_type":"code","source":["package main\n","\n","import (\n","\t\"fmt\"\n",")\n","\n","func countingSort(arr []int) []int {\n","\tif len(arr) == 0 {\n","\t\treturn arr\n","\t}\n","\n","\tmax := arr[0]\n","\tfor _, num := range arr {\n","\t\tif num > max {\n","\t\t\tmax = num\n","\t\t}\n","\t}\n","\n","\tcount := make([]int, max+1)\n","\n","\tfor _, num := range arr {\n","\t\tcount[num]++\n","\t}\n","\n","\tfor i := 1; i <= max; i++ {\n","\t\tcount[i] += count[i-1]\n","\t}\n","\n","\tsorted := make([]int, len(arr))\n","\tfor _, num := range arr {\n","\t\tsorted[count[num]-1] = num\n","\t\tcount[num]--\n","\t}\n","\n","\treturn sorted\n","}\n","\n","func main() {\n","\tvar n int\n","\tfor {\n","\t\tfmt.Scan(&n)\n","\t\tif n == 0 {\n","\t\t\tbreak\n","\t\t}\n","\n","\t\tarr := make([]int, n)\n","\t\tfor i := 0; i < n; i++ {\n","\t\t\tfmt.Scan(&arr[i])\n","\t\t}\n","\n","\t\tsorted := countingSort(arr)\n","\n","\t\tfor i, num := range sorted {\n","\t\t\tfmt.Print(num)\n","\t\t\tif i != len(sorted)-1 {\n","\t\t\t\tfmt.Print(\" \")\n","\t\t\t}\n","\t\t}\n","\t\tfmt.Println()\n","\t}\n","}"],"metadata":{"id":"EeaC4D2SlFdo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["25-"],"metadata":{"id":"tagDgg2zlK0Y"}},{"cell_type":"code","source":["package main\n","\n","import (\n","\t\"fmt\"\n",")\n","\n","func main() {\n","\tvar sorteados [6]int\n","\tfor i := 0; i < 6; i++ {\n","\t\tfmt.Scan(&sorteados[i])\n","\t}\n","\n","\tvar n int\n","\tfmt.Scan(&n)\n","\n","\tsena := 0\n","\tquina := 0\n","\tquadra := 0\n","\n","\tfor i := 0; i < n; i++ {\n","\t\tvar aposta [6]int\n","\t\tfor j := 0; j < 6; j++ {\n","\t\t\tfmt.Scan(&aposta[j])\n","\t\t}\n","\n","\t\tacertos := 0\n","\t\tfor _, num := range aposta {\n","\t\t\tfor _, sorteado := range sorteados {\n","\t\t\t\tif num == sorteado {\n","\t\t\t\t\tacertos++\n","\t\t\t\t\tbreak\n","\t\t\t\t}\n","\t\t\t}\n","\t\t}\n","\n","\t\tswitch acertos {\n","\t\tcase 6:\n","\t\t\tsena++\n","\t\tcase 5:\n","\t\t\tquina++\n","\t\tcase 4:\n","\t\t\tquadra++\n","\t\t}\n","\t}\n","\n","\tif sena > 0 {\n","\t\tfmt.Printf(\"Houve %d acertador(es) da sena\\n\", sena)\n","\t} else {\n","\t\tfmt.Println(\"Nao houve acertador para sena\")\n","\t}\n","\n","\tif quina > 0 {\n","\t\tfmt.Printf(\"Houve %d acertador(es) da quina\\n\", quina)\n","\t} else {\n","\t\tfmt.Println(\"Nao houve acertador para quina\")\n","\t}\n","\n","\tif quadra > 0 {\n","\t\tfmt.Printf(\"Houve %d acertador(es) da quadra\\n\", quadra)\n","\t} else {\n","\t\tfmt.Println(\"Nao houve acertador para quadra\")\n","\t}\n","}"],"metadata":{"id":"ggBJdnTclLqI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["26-"],"metadata":{"id":"C0P0yGoWlQDI"}},{"cell_type":"code","source":["package main\n","\n","import (\n","\t\"fmt\"\n","\t\"sort\"\n",")\n","\n","func encontrarCombinação(números []int) []int {\n","\tfor i := 0; i < len(números); i++ {\n","\t\tfor j := i + 1; j < len(números); j++ {\n","\t\t\tsoma := 0\n","\t\t\tescolhidos := make([]int, 0, 7)\n","\t\t\tfor k := 0; k < len(números); k++ {\n","\t\t\t\tif k != i && k != j {\n","\t\t\t\t\tsoma += números[k]\n","\t\t\t\t\tescolhidos = append(escolhidos, números[k])\n","\t\t\t\t}\n","\t\t\t}\n","\t\t\tif soma == 100 {\n","\t\t\t\treturn escolhidos\n","\t\t\t}\n","\t\t}\n","\t}\n","\treturn nil\n","}\n","\n","func main() {\n","\tvar t int\n","\tfmt.Scan(&t)\n","\n","\tfor casoTeste := 0; casoTeste < t; casoTeste++ {\n","\t\tnúmeros := make([]int, 9)\n","\t\tfor i := 0; i < 9; i++ {\n","\t\t\tfmt.Scan(&números[i])\n","\t\t}\n","\n","\t\tescolhidos := encontrarCombinação(números)\n","\t\tsort.Ints(escolhidos)\n","\t\tfor _, num := range escolhidos {\n","\t\t\tfmt.Println(num)\n","\t\t}\n","\t}\n","}"],"metadata":{"id":"9TuzX5k2lQ9I"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["27-"],"metadata":{"id":"BRTrLvXclWeo"}},{"cell_type":"code","source":["package main\n","\n","import (\n","\t\"fmt\"\n",")\n","\n","func intercalarOrdenado(v1, v2 []int) []int {\n","\ttamanho := len(v1) + len(v2)\n","\tresultado := make([]int, tamanho)\n","\n","\ti, j, k := 0, 0, 0\n","\n","\tfor i < len(v1) && j < len(v2) {\n","\t\tif v1[i] < v2[j] {\n","\t\t\tresultado[k] = v1[i]\n","\t\t\ti++\n","\t\t} else {\n","\t\t\tresultado[k] = v2[j]\n","\t\t\tj++\n","\t\t}\n","\t\tk++\n","\t}\n","\n","\tfor i < len(v1) {\n","\t\tresultado[k] = v1[i]\n","\t\ti++\n","\t\tk++\n","\t}\n","\n","\tfor j < len(v2) {\n","\t\tresultado[k] = v2[j]\n","\t\tj++\n","\t\tk++\n","\t}\n","\n","\treturn resultado\n","}\n","\n","func main() {\n","\tvar q1, q2 int\n","\tfmt.Scan(&q1, &q2)\n","\n","\tv1 := make([]int, q1)\n","\tv2 := make([]int, q2)\n","\n","\tfor i := 0; i < q1; i++ {\n","\t\tfmt.Scan(&v1[i])\n","\t}\n","\n","\tfor i := 0; i < q2; i++ {\n","\t\tfmt.Scan(&v2[i])\n","\t}\n","\n","\tresultado := intercalarOrdenado(v1, v2)\n","\n","    fmt.Printf(\"\\n\")\n","\tfor _, valor := range resultado {\n","\t\tfmt.Println(valor)\n","\t}\n","}"],"metadata":{"id":"2YTiY3Tjla2Q"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["28-"],"metadata":{"id":"HQYOm1JSlbm_"}},{"cell_type":"code","source":["package main\n","\n","import (\n","\t\"fmt\"\n",")\n","\n","func lerConjunto(tamanho int) []int {\n","\tconjunto := make([]int, 0, tamanho)\n","\texistente := make(map[int]bool)\n","\n","\tfor len(conjunto) < tamanho {\n","\t\tvar elemento int\n","\t\tfmt.Scan(&elemento)\n","\n","\t\tif !existente[elemento] {\n","\t\t\tconjunto = append(conjunto, elemento)\n","\t\t\texistente[elemento] = true\n","\t\t} else {\n","\t\t\tfmt.Println(\"Elemento repetido. Por favor, insira um elemento diferente.\")\n","\t\t}\n","\t}\n","\n","\treturn conjunto\n","}\n","\n","func uniao(conjuntoA, conjuntoB []int) []int {\n","\tuniao := make(map[int]bool)\n","\n","\tfor _, elemento := range conjuntoA {\n","\t\tuniao[elemento] = true\n","\t}\n","\n","\tfor _, elemento := range conjuntoB {\n","\t\tuniao[elemento] = true\n","\t}\n","\n","\tresultado := make([]int, 0, len(uniao))\n","\tfor elemento := range uniao {\n","\t\tresultado = append(resultado, elemento)\n","\t}\n","\n","\treturn resultado\n","}\n","\n","func intersecao(conjuntoA, conjuntoB []int) []int {\n","\tintersecao := make(map[int]bool)\n","\n","\tfor _, elemento := range conjuntoA {\n","\t\tif conjuntoBContains(conjuntoB, elemento) {\n","\t\t\tintersecao[elemento] = true\n","\t\t}\n","\t}\n","\n","\tresultado := make([]int, 0, len(intersecao))\n","\tfor elemento := range intersecao {\n","\t\tresultado = append(resultado, elemento)\n","\t}\n","\n","\treturn resultado\n","}\n","\n","func conjuntoBContains(conjuntoB []int, elemento int) bool {\n","\tfor _, valor := range conjuntoB {\n","\t\tif valor == elemento {\n","\t\t\treturn true\n","\t\t}\n","\t}\n","\treturn false\n","}\n","\n","func imprimirConjunto(conjunto []int) {\n","\tfmt.Print(\"(\")\n","\tfor i, elemento := range conjunto {\n","\t\tfmt.Print(elemento)\n","\t\tif i < len(conjunto)-1 {\n","\t\t\tfmt.Print(\",\")\n","\t\t}\n","\t}\n","\tfmt.Println(\")\")\n","}\n","\n","func main() {\n","\tvar tamanhoA, tamanhoB int\n","\tfmt.Scan(&tamanhoA)\n","\tfor tamanhoA <= 0 || tamanhoA > 100 {\n","\t\tfmt.Println(\"Tamanho inválido. O tamanho do conjunto A deve estar entre 1 e 100. Digite novamente:\")\n","\t\tfmt.Scan(&tamanhoA)\n","\t}\n","\n","\tfmt.Scan(&tamanhoB)\n","\tfor tamanhoB <= 0 || tamanhoB > 100 {\n","\t\tfmt.Println(\"Tamanho inválido. O tamanho do conjunto B deve estar entre 1 e 100. Digite novamente:\")\n","\t\tfmt.Scan(&tamanhoB)\n","\t}\n","\n","\tconjuntoA := lerConjunto(tamanhoA)\n","\tconjuntoB := lerConjunto(tamanhoB)\n","\n","\tuni := uniao(conjuntoA, conjuntoB)\n","\tinter := intersecao(conjuntoA, conjuntoB)\n","\n","\tfmt.Println(\"União:\")\n","\timprimirConjunto(uni)\n","\tfmt.Println(\"Interseção:\")\n","\timprimirConjunto(inter)\n","}"],"metadata":{"id":"uI9z2aYUlh4H"},"execution_count":null,"outputs":[]}]}